import org.yaml.snakeyaml.Yaml

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.jetbrains.kotlin.kapt)
    alias(libs.plugins.hilt)
}

apply from: '../code_coverage.gradle'
apply from: '../build_config.gradle'

android {
    namespace 'com.thoughtworks.composetemplate'
    compileSdk libs.versions.compileSdk.get().toInteger()

    defaultConfig {
        applicationId "com.thoughtworks.composetemplate"
        minSdk libs.versions.minSdk.get().toInteger()
        targetSdk libs.versions.targetSdk.get().toInteger()
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "Boolean", "ADD_DEV_MENU", "${gradle.ext.addDevMenu}"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
        dev {
            initWith debug
            versionNameSuffix "-dev"
        }
        qa {
            initWith release
            debuggable true
            versionNameSuffix "-test"
        }
        stage {
            initWith release
            versionNameSuffix "-stage"
        }
        prod {
            initWith release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.kotlinCompilerExtension.get()
    }
    packaging {
        resources {
            it.excludes += '/META-INF/{AL2.0,LGPL2.1}'
            it.merges += 'META-INF/LICENSE.md'
            it.merges += 'META-INF/LICENSE-notice.md'
        }
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        packagingOptions {
            jniLibs {
                useLegacyPackaging = true
            }
        }
    }
    sourceSets {
        main {
            if (gradle.ext.addDevMenu) {
                java.srcDirs += 'src/devMenu/java'
            }
        }
    }
    applicationVariants.configureEach { variant ->
        def configs = loadConfigByBuildVariant(variant) { return new Yaml() }
        configs.each { config ->
            variant.buildConfigField config['type'], config['name'], config['value']
        }
    }

//    copy {
//        from '../githooks'
//        into '../.git/hooks'
//        fileMode 0755
//    }
}

dependencies {
    // foundation
    implementation libs.androidx.multidex
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation libs.kotlin.stdlib
    implementation libs.kotlinx.coroutines.android

    // compose
    implementation libs.androidx.activity.compose
    implementation libs.androidx.navigation.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.foundation
    implementation libs.androidx.animation
    implementation libs.androidx.material.icons.core
    implementation libs.androidx.material.icons.extended
    implementation libs.coil.compose
    // di
    kapt libs.hilt.compiler
    implementation libs.hilt.android
    implementation libs.hilt.navigation.compose
    // network
    implementation libs.okhttp
    implementation libs.okhttp.logging
    implementation libs.retrofit
    implementation libs.retrofit.gson
    implementation libs.gson

    testImplementation libs.junit
    testImplementation libs.androidx.test.core
    testImplementation libs.mockk
    testImplementation libs.assertj.core
    testImplementation(libs.kotlinx.coroutines.test) {
        // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    testImplementation libs.robolectric
    testImplementation platform(libs.androidx.compose.bom)
    testImplementation libs.androidx.ui.test
    testImplementation libs.androidx.ui.test.junit4

    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.mockk.android
    androidTestImplementation libs.assertj.core
    androidTestImplementation(libs.kotlinx.coroutines.test) {
        // https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-debug#debug-agent-and-android
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}